//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: testingauth.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Testingauth_AuthClient`, then call methods of this protocol to make API calls.
public protocol Testingauth_AuthClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Testingauth_AuthClientInterceptorFactoryProtocol? { get }

  func sendReportToken(
    _ request: Testingauth_ReportToken,
    callOptions: CallOptions?
  ) -> UnaryCall<Testingauth_ReportToken, Testingauth_Ack>

  func pollPositive(
    _ request: Testingauth_Date,
    callOptions: CallOptions?
  ) -> UnaryCall<Testingauth_Date, Testingauth_Batch>

  func pollNegative(
    _ request: Testingauth_Date,
    callOptions: CallOptions?
  ) -> UnaryCall<Testingauth_Date, Testingauth_Batch>
}

extension Testingauth_AuthClientProtocol {
  public var serviceName: String {
    return "testingauth.Auth"
  }

  /// Unary call to sendReportToken
  ///
  /// - Parameters:
  ///   - request: Request to send to sendReportToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func sendReportToken(
    _ request: Testingauth_ReportToken,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Testingauth_ReportToken, Testingauth_Ack> {
    return self.makeUnaryCall(
      path: "/testingauth.Auth/sendReportToken",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesendReportTokenInterceptors() ?? []
    )
  }

  /// Unary call to pollPositive
  ///
  /// - Parameters:
  ///   - request: Request to send to pollPositive.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func pollPositive(
    _ request: Testingauth_Date,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Testingauth_Date, Testingauth_Batch> {
    return self.makeUnaryCall(
      path: "/testingauth.Auth/pollPositive",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makepollPositiveInterceptors() ?? []
    )
  }

  /// Unary call to pollNegative
  ///
  /// - Parameters:
  ///   - request: Request to send to pollNegative.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func pollNegative(
    _ request: Testingauth_Date,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Testingauth_Date, Testingauth_Batch> {
    return self.makeUnaryCall(
      path: "/testingauth.Auth/pollNegative",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makepollNegativeInterceptors() ?? []
    )
  }
}

public protocol Testingauth_AuthClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'sendReportToken'.
  func makesendReportTokenInterceptors() -> [ClientInterceptor<Testingauth_ReportToken, Testingauth_Ack>]

  /// - Returns: Interceptors to use when invoking 'pollPositive'.
  func makepollPositiveInterceptors() -> [ClientInterceptor<Testingauth_Date, Testingauth_Batch>]

  /// - Returns: Interceptors to use when invoking 'pollNegative'.
  func makepollNegativeInterceptors() -> [ClientInterceptor<Testingauth_Date, Testingauth_Batch>]
}

public final class Testingauth_AuthClient: Testingauth_AuthClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Testingauth_AuthClientInterceptorFactoryProtocol?

  /// Creates a client for the testingauth.Auth service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Testingauth_AuthClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Testingauth_AuthProvider: CallHandlerProvider {
  var interceptors: Testingauth_AuthServerInterceptorFactoryProtocol? { get }

  func sendReportToken(request: Testingauth_ReportToken, context: StatusOnlyCallContext) -> EventLoopFuture<Testingauth_Ack>

  func pollPositive(request: Testingauth_Date, context: StatusOnlyCallContext) -> EventLoopFuture<Testingauth_Batch>

  func pollNegative(request: Testingauth_Date, context: StatusOnlyCallContext) -> EventLoopFuture<Testingauth_Batch>
}

extension Testingauth_AuthProvider {
  public var serviceName: Substring { return "testingauth.Auth" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "sendReportToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Testingauth_ReportToken>(),
        responseSerializer: ProtobufSerializer<Testingauth_Ack>(),
        interceptors: self.interceptors?.makesendReportTokenInterceptors() ?? [],
        userFunction: self.sendReportToken(request:context:)
      )

    case "pollPositive":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Testingauth_Date>(),
        responseSerializer: ProtobufSerializer<Testingauth_Batch>(),
        interceptors: self.interceptors?.makepollPositiveInterceptors() ?? [],
        userFunction: self.pollPositive(request:context:)
      )

    case "pollNegative":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Testingauth_Date>(),
        responseSerializer: ProtobufSerializer<Testingauth_Batch>(),
        interceptors: self.interceptors?.makepollNegativeInterceptors() ?? [],
        userFunction: self.pollNegative(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Testingauth_AuthServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'sendReportToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makesendReportTokenInterceptors() -> [ServerInterceptor<Testingauth_ReportToken, Testingauth_Ack>]

  /// - Returns: Interceptors to use when handling 'pollPositive'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makepollPositiveInterceptors() -> [ServerInterceptor<Testingauth_Date, Testingauth_Batch>]

  /// - Returns: Interceptors to use when handling 'pollNegative'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makepollNegativeInterceptors() -> [ServerInterceptor<Testingauth_Date, Testingauth_Batch>]
}
