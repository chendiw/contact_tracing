//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: testingauth.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Testingauth_AuthClient`, then call methods of this protocol to make API calls.
internal protocol Testingauth_AuthClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Testingauth_AuthClientInterceptorFactoryProtocol? { get }

  func startTest(
    _ request: Testingauth_PretestTokens,
    callOptions: CallOptions?
  ) -> UnaryCall<Testingauth_PretestTokens, Testingauth_Ack>

  func getResult(
    _ request: Testingauth_Check,
    callOptions: CallOptions?
  ) -> UnaryCall<Testingauth_Check, Testingauth_TestResult>
}

extension Testingauth_AuthClientProtocol {
  internal var serviceName: String {
    return "testingauth.Auth"
  }

  /// Unary call to startTest
  ///
  /// - Parameters:
  ///   - request: Request to send to startTest.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func startTest(
    _ request: Testingauth_PretestTokens,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Testingauth_PretestTokens, Testingauth_Ack> {
    return self.makeUnaryCall(
      path: "/testingauth.Auth/startTest",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makestartTestInterceptors() ?? []
    )
  }

  /// Unary call to getResult
  ///
  /// - Parameters:
  ///   - request: Request to send to getResult.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getResult(
    _ request: Testingauth_Check,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Testingauth_Check, Testingauth_TestResult> {
    return self.makeUnaryCall(
      path: "/testingauth.Auth/getResult",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetResultInterceptors() ?? []
    )
  }
}

internal protocol Testingauth_AuthClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'startTest'.
  func makestartTestInterceptors() -> [ClientInterceptor<Testingauth_PretestTokens, Testingauth_Ack>]

  /// - Returns: Interceptors to use when invoking 'getResult'.
  func makegetResultInterceptors() -> [ClientInterceptor<Testingauth_Check, Testingauth_TestResult>]
}

internal final class Testingauth_AuthClient: Testingauth_AuthClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Testingauth_AuthClientInterceptorFactoryProtocol?

  /// Creates a client for the testingauth.Auth service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Testingauth_AuthClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Testingauth_AuthProvider: CallHandlerProvider {
  var interceptors: Testingauth_AuthServerInterceptorFactoryProtocol? { get }

  func startTest(request: Testingauth_PretestTokens, context: StatusOnlyCallContext) -> EventLoopFuture<Testingauth_Ack>

  func getResult(request: Testingauth_Check, context: StatusOnlyCallContext) -> EventLoopFuture<Testingauth_TestResult>
}

extension Testingauth_AuthProvider {
  internal var serviceName: Substring { return "testingauth.Auth" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "startTest":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Testingauth_PretestTokens>(),
        responseSerializer: ProtobufSerializer<Testingauth_Ack>(),
        interceptors: self.interceptors?.makestartTestInterceptors() ?? [],
        userFunction: self.startTest(request:context:)
      )

    case "getResult":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Testingauth_Check>(),
        responseSerializer: ProtobufSerializer<Testingauth_TestResult>(),
        interceptors: self.interceptors?.makegetResultInterceptors() ?? [],
        userFunction: self.getResult(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Testingauth_AuthServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'startTest'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makestartTestInterceptors() -> [ServerInterceptor<Testingauth_PretestTokens, Testingauth_Ack>]

  /// - Returns: Interceptors to use when handling 'getResult'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makegetResultInterceptors() -> [ServerInterceptor<Testingauth_Check, Testingauth_TestResult>]
}
